define("tiny_cursive/replay",["exports"],(function(_exports){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0;return _exports.default=class{constructor(elementId,filePath){let speed=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,loop=arguments.length>3&&void 0!==arguments[3]&&arguments[3],controllerId=arguments.length>4?arguments[4]:void 0;console.log(filePath,elementId,controllerId),this.replayInProgress=!1,this.speed=speed,this.loop=loop;const element=document.getElementById(elementId);if(!element)throw new Error("Element with id '".concat(elementId,"' not found"));this.outputElement=element,controllerId&&(console.log("made it here"),this.constructController(controllerId)),this.loadJSON(filePath).then((data=>{this.logData=data,"data"in this.logData&&(this.logData=this.logData.data),"payload"in this.logData&&(this.logData=this.logData.payload),this.startReplay()})).catch((error=>{throw new Error("Error loading JSON file: "+error.message)}))}constructController(controllerId){const controller=document.getElementById(controllerId);console.log(controller),controller&&(this.scrubberElement=document.createElement("input"),this.scrubberElement.type="range",this.scrubberElement.id="timelineScrubber",this.scrubberElement.min="0",this.scrubberElement.max="100",this.scrubberElement.addEventListener("input",(()=>{const scrubberValue=this.scrubberElement.value;this.skipToTime(scrubberValue)})),controller.appendChild(this.scrubberElement))}setScrubberVal(value){this.scrubberElement&&(this.scrubberElement.value=String(value))}loadJSON(filePath){return fetch(filePath).then((response=>{if(!response.ok)throw new Error("Failed to fetch JSON file");if("0"===response.headers.get("content-length"))throw new Error("Empty JSON response");return response.json()})).catch((error=>{throw new Error("Error loading JSON file: "+error.message)}))}startReplay(){this.replayInProgress&&clearTimeout(this.replayTimeout),this.replayInProgress=!0,this.outputElement.innerHTML="",this.replayLog()}replayLog(){let textOutput="",index=0;const processEvent=()=>{if(console.log(11),this.replayInProgress)if(index<this.logData.length){let event=this.logData[index++];"keydown"===event.event.toLowerCase()&&(textOutput=this.applyKey(event.key,textOutput)),this.outputElement.innerHTML=textOutput,this.setScrubberVal(index/this.logData.length*100),this.replayTimeout=setTimeout(processEvent,1/this.speed*100)}else this.replayInProgress=!1,this.loop&&this.startReplay()};processEvent()}skipToEnd(){this.replayInProgress&&(this.replayInProgress=!1);let textOutput="";this.logData.forEach((event=>{"keydown"===event.event.toLowerCase()&&(textOutput=this.applyKey(event.key,textOutput))})),this.outputElement.innerHTML=textOutput.slice(0,-1),this.setScrubberVal(100)}skipToTime(percentage){this.replayInProgress&&(this.replayInProgress=!1);let textOutput="";const numElementsToProcess=Math.ceil(this.logData.length*percentage/100);for(let i=0;i<numElementsToProcess;i++){const event=this.logData[i];"keydown"===event.event.toLowerCase()&&(textOutput=this.applyKey(event.key,textOutput))}this.outputElement.innerHTML=textOutput.slice(0,-1),this.setScrubberVal(percentage)}applyKey(key,textOutput){switch(key){case"Enter":return textOutput+"\n";case"Backspace":return textOutput.slice(0,-1);case"ControlBackspace":let lastSpace=textOutput.lastIndexOf(" ");return textOutput.slice(0,lastSpace);default:return["Shift","Ctrl","Alt","ArrowDown","ArrowUp","Control","ArrowRight","ArrowLeft"].includes(key)?textOutput:textOutput+key}}},_exports.default}));

//# sourceMappingURL=replay.min.js.map